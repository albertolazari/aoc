#!/bin/bash -e

script_dir=$(dirname $BASH_SOURCE)

# List of all the languages and extensions
supported_languages=(
    shell.sh
    spreadsheet.xlsx
    sql.sql
    pascal.pas
    r.r
    perl.pl
    clojure.clj
    php.php
    rust.rs
    javascript.js
    ruby.rb
    python.py
    java.java
    c.c
    c++.cpp
    j.ijs
    vimscript.vim
    fortran.f
    erlang.erl
    typst.typ
)

print_help () {
    echo usage: lang [-cEh] [-s LANGUAGE] [-e LANGUAGE]
    echo options:
    echo '-c    print the current language (if any)'
    echo '-e    return the passed language extension'
    echo '-E    return the current language extension'
    echo '-h    print this message'
    echo '-s    set the language for the day'
}

set_language () {
    language=$1

    if [[ -f $script_dir/../run-language/$language ]]; then
        echo $language > .lang
    else
        echo Error: the selected language has not yet been configured >&2
        exit 1
    fi
}

extension_of () {
    local ext=$(<<< "${supported_languages[@]}" grep -o "$1\.[^ ]*" | sed "s/$1\(\..*\)/\1/")

    if [[ -z $ext ]]; then
        echo "Error: '$1' is not supported yet" >&2
        exit 1
    fi

    echo $ext
}

language_of () {
    local lang=$(<<< "${supported_languages[@]}" grep -o "[^ ]*\.$1" | sed "s/\(.*\)\.$1/\1/")

    if [[ -z $lang ]]; then
        echo "Error: extension '.$1' not recognized" >&2
        exit 1
    fi

    echo $lang
}

load_options() {
    while getopts :ce:Ehs: opt; do
        case "$opt" in
            c)  current_only=true
                ;;
            e)  extension_of $OPTARG
                exit 0
                ;;
            E)  [[ $language != '' ]] && extension_of $language
                exit 0
                ;;
            s)  set_language $OPTARG
                exit 0
                ;;
            h)  print_help
                exit 0
                ;;
            *)  print_help
                exit 1
                ;;
        esac
    done
}

current_only=false

[[ -f .lang ]] && language=$(< .lang)

if ! ls part-[12].* &> /dev/null; then
    echo Error: no solution found >&2
    exit 1
fi

languages=()
# Retrieve languages from the file extension
for extension in $(ls part-[12].* | sed 's/.*\.\(.*\)$/\1/' | sort -u); do
    l=$(language_of $extension)
    languages+=($l)
done

if (( ${#languages[@]} == 1 )); then
    language=${languages[0]}
fi

load_options "$@"

if (( ${#languages[@]} < 1 )); then
    echo Error: no language recognized >&2
    exit 1
fi

if (( ${#languages[@]} == 1 )); then
    echo $language
else
    for l in ${languages[@]}; do
        if ! $current_only; then
            echo $l $([[ $l != $language ]] || echo '(current)')
        else
            if [[ $l = $language ]]; then
                echo $l
            fi
        fi
    done
fi

if $current_only && [[ $language = '' ]]; then
    echo Error: multiple languages detected >&2
    echo "run the solutions with 'aoc run -l LANGUAGE'" >&2
    echo "or set the current language for this day with 'aoc lang -s LANGUAGE'" >&2
    exit 1
fi
